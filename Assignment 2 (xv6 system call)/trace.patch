diff --git a/Makefile b/Makefile
index 39a99d7..a3414d4 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..b69b2d5 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -322,6 +322,15 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  // offline 2 : trace
+  np->trace_id = p->trace_id;
+  for (int i = 0; i < 6; i++)
+  {
+    np->arg_types[i] = p->arg_types[i];
+    np->nargs[i] = p->nargs[i];
+    np->sargs[i] = p->sargs[i];
+  }
+
   return pid;
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..be8c87d 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // offline 2 : trace
+  int trace_id; // id of the syscall that needs to be traced
+  char arg_types[6]; // i, p, s for integer, pointer and string type arg respectively
+  uint64 nargs[6]; // for numeric arguments (int and pointer)
+  char *sargs[6]; // for string arguments
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..76599f2 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -57,6 +57,13 @@ void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+
+  // offline 2 : trace
+  struct proc *p = myproc();
+  if (p->trapframe->a7 == p->trace_id) {
+    p->arg_types[n] = 'i';
+    p->nargs[n] = *ip;
+  }
 }
 
 // Retrieve an argument as a pointer.
@@ -66,6 +73,13 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+
+  // offline 2 : trace
+  struct proc *p = myproc();
+  if (p->trapframe->a7 == p->trace_id) {
+    p->arg_types[n] = 'p';
+    p->nargs[n] = *ip;
+  }
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -76,7 +90,16 @@ argstr(int n, char *buf, int max)
 {
   uint64 addr;
   argaddr(n, &addr);
-  return fetchstr(addr, buf, max);
+  int ret = fetchstr(addr, buf, max);
+  
+  // offline 2 : trace
+  struct proc *p = myproc();
+  if (p->trapframe->a7 == p->trace_id) {
+    p->arg_types[n] = 's';
+    p->sargs[n] = buf;
+  }
+
+  return ret;
 }
 
 // Prototypes for the functions that handle system calls.
@@ -101,6 +124,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void); // offline 2 : trace
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +150,16 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace, // offline 2 : trace
+};
+
+// for offline 2 : trace
+static char *syscall_names[] = {
+  "", "fork", "exit", "wait", "pipe", "read", 
+  "kill", "exec", "fstat", "chdir", "dup", 
+  "getpid", "sbrk", "sleep", "uptime", "open", 
+  "write", "mknod", "unlink", "link", 
+  "mkdir", "close", "trace",
 };
 
 void
@@ -139,6 +173,27 @@ syscall(void)
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+
+    // offline 2 : trace
+    if (p->trace_id == num) { // we wanted to trace this
+      printf("pid: %d, syscall: %s, args: (", p->pid, syscall_names[num]);
+
+      for (int i = 0; i < 6; i++) {
+        char c = p->arg_types[i];
+        if (c != 'i' && c != 'p' && c != 's')
+          break;
+        if (i)
+          printf(", ");
+        if (c == 'i')
+          printf("%d", p->nargs[i]);
+        else if (c == 'p')
+          printf("%p", p->nargs[i]);
+        else if (c == 's')
+          printf("%s", p->sargs[i]);
+      }
+
+      printf("), return: %d\n", p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..499963b 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22 // offline 2 : trace
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..7309ef9 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,20 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// offline 2 : trace
+uint64
+sys_trace(void)
+{
+  int syscall_num;
+  argint(0, &syscall_num);
+  if (syscall_num < 0)
+    return -1;
+  struct proc *p = myproc(); // myproc() returns the current process
+  p->trace_id = syscall_num; 
+  for (int i = 0; i < 6; i++) {
+    p->arg_types[i] = 'x';
+  }
+
+  return 0;
+}
\ No newline at end of file
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..81d231c 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int); // offline 2 : trace
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..9c97b05 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
