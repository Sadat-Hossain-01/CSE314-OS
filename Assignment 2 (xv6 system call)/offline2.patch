diff --git a/Makefile b/Makefile
index 39a99d7..57cd232 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
+	$U/_shutdown\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..29538df 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct syscall_status; // offline 2 : history
 
 // bio.c
 void            binit(void);
@@ -139,6 +140,8 @@ int             argstr(int, char*, int);
 void            argaddr(int, uint64 *);
 int             fetchstr(uint64, char*, int);
 int             fetchaddr(uint64, uint64*);
+void            syscallinit(void);                          // offline 2 : history
+uint64          get_syscall(int, struct syscall_status*);   // offline 2 : history
 void            syscall();
 
 // trap.c
@@ -185,5 +188,8 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+// start.c
+void            halt(void); // offline 2 : exit
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index fb31b32..4714b01 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -97,12 +97,17 @@ timervec:
         # scratch[0,8,16] : register save area.
         # scratch[24] : address of CLINT's MTIMECMP register.
         # scratch[32] : desired interval between interrupts.
+        # scratch[40] : halt flag which is set by halt() function at start.c
         
         csrrw a0, mscratch, a0
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
 
+        # halt if halt() in start.c has set this halt flag to 1
+        ld a1, 40(a0)
+        bne a1, zero, halt
+
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
@@ -122,3 +127,18 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+
+halt:
+        # based on qemu's hw/riscv/virt.c:
+        # qemu halts [as per hw/misc/sifive_test.c] if
+        # FINISHER_PASS(=0x5555) [value from include/hw/misc/sifive_test.h]
+        # is written at address *VIRT_TEST(=0x100000L) [also found from hw/riscv/virt.c]
+
+        # RISC-V lui loads 20-bit immediate value
+        # into the upper 20 bits of a 32-bit register
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
+spin:
+        j spin
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..526569e 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -28,6 +28,7 @@ main()
     iinit();         // inode table
     fileinit();      // file table
     virtio_disk_init(); // emulated hard disk
+    syscallinit();      // offline 2 : history, initializes the syscall structs
     userinit();      // first user process
     __sync_synchronize();
     started = 1;
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..eb12411 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -123,6 +123,10 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
+  p->trace_id = -1;             // offline 2 : trace nothing initially
+  for (int i = 0; i < 6; i++) { // offline 2 : reset argument types at start
+    p->arg_types[i] = 'x';
+  }
   p->state = USED;
 
   // Allocate a trapframe page.
@@ -322,6 +326,8 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  // offline 2 : trace
+  np->trace_id = p->trace_id;
   return pid;
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..157837f 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // offline 2 : trace
+  int trace_id;           // id of the syscall that needs to be traced
+  char arg_types[6];      // i, p, s for integer, pointer and string type args respectively
+  uint64 nargs[6];        // for numeric arguments (int and pointer)
+  char sargs[6][MAXPATH]; // string arguments (string arguments of syscalls only used for file names)
 };
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..528d710 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -11,7 +11,8 @@ void timerinit();
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+// an extra element added to store the flag for shutdown
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -73,9 +74,11 @@ timerinit()
   // scratch[0..2] : space for timervec to save registers.
   // scratch[3] : address of CLINT MTIMECMP register.
   // scratch[4] : desired interval (in cycles) between timer interrupts.
+  // scratch[5] : flag to signal timervec to halt or shutdown
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+  scratch[5] = 0; // initially set to 0, will halt if set to 1
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +90,12 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+
+
+// offline 2 : exit
+void
+halt(void)
+{
+  // set halt flag in scratch area for hartid[0] to 1.
+  timer_scratch[0][5] = 1;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..2dc14d8 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -6,6 +6,7 @@
 #include "proc.h"
 #include "syscall.h"
 #include "defs.h"
+#include "syscall_status.h"
 
 // Fetch the uint64 at addr from the current process.
 int
@@ -57,6 +58,13 @@ void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+
+  // offline 2 : trace
+  struct proc *p = myproc();
+  if (p->trapframe->a7 == p->trace_id) {
+    p->arg_types[n] = 'i';
+    p->nargs[n] = *ip;
+  }
 }
 
 // Retrieve an argument as a pointer.
@@ -66,6 +74,13 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+
+  // offline 2 : trace
+  struct proc *p = myproc();
+  if (p->trapframe->a7 == p->trace_id) {
+    p->arg_types[n] = 'p';
+    p->nargs[n] = *ip;
+  }
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -76,7 +91,18 @@ argstr(int n, char *buf, int max)
 {
   uint64 addr;
   argaddr(n, &addr);
-  return fetchstr(addr, buf, max);
+  char buf_here[max];
+  int ret = fetchstr(addr, buf_here, max);
+  safestrcpy(buf, buf_here, max);
+
+  // offline 2 : trace
+  struct proc *p = myproc();
+  if (p->trapframe->a7 == p->trace_id) {
+    p->arg_types[n] = 's';
+    safestrcpy(p->sargs[n], buf_here, max);
+  }
+
+  return ret;
 }
 
 // Prototypes for the functions that handle system calls.
@@ -101,6 +127,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);    // offline 2 : trace
+extern uint64 sys_history(void);  // offline 2 : history
+extern uint64 sys_shutdown(void); // offline 2 : history
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +155,52 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,      // offline 2 : trace
+[SYS_history] sys_history,    // offline 2 : history
+[SYS_shutdown] sys_shutdown,  // offline 2 : exit
+};
+
+
+// offline 2 : history (and trace)
+struct syscall_status syscall_stats[] = {
+  {""},
+  {"fork"}, {"exit"}, {"wait"}, {"pipe"},
+  {"read"}, {"kill"}, {"exec"}, {"fstat"},
+  {"chdir"}, {"dup"}, {"getpid"}, {"sbrk"},
+  {"sleep"}, {"uptime"}, {"open"}, {"write"},
+  {"mknod"}, {"unlink"}, {"link"}, {"mkdir"},
+  {"close"}, {"trace"}, {"history"}, {"shutdown"},
 };
 
+
+// offline 2 : history
+void
+syscallinit(void)
+{
+  // NELEM returns number of elements in a fixed size array
+  int n_syscall = NELEM(syscall_stats);
+  for (int i = 0; i < n_syscall; i++)
+  {
+    initlock(&(syscall_stats[i].lock), "lock");
+    syscall_stats[i].count = 0;
+    syscall_stats[i].accum_time = 0;
+  }
+}
+
+uint64
+get_syscall(int idx, struct syscall_status* p)
+{
+  if (idx <= 0 || idx >= NELEM(syscall_stats))
+    return -1;
+  // p now contains the user struct address
+  acquire(&syscall_stats[idx].lock);
+  int ret = copyout(myproc()->pagetable, (uint64)p, (char *)&syscall_stats[idx], sizeof(*p));
+  release(&syscall_stats[idx].lock);
+  if (ret < 0)
+    return -1;
+  return 0;
+}
+
 void
 syscall(void)
 {
@@ -135,11 +208,51 @@ syscall(void)
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+  int should_print = 0;
+  if (p->trace_id == num)
+    should_print = 1;
+
+  if (num > 0 && num < NELEM(syscalls) && syscalls[num])
+  {
+    acquire(&tickslock);
+    uint64 ticks0 = ticks;
+    release(&tickslock);
+
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
-  } else {
+
+    acquire(&tickslock);
+    ticks0 = ticks - ticks0;
+    release(&tickslock);
+
+    acquire(&syscall_stats[num].lock);
+    syscall_stats[num].count++;
+    syscall_stats[num].accum_time += ticks0;
+    release(&syscall_stats[num].lock);
+
+    // offline 2 : trace
+    if (should_print) { // we wanted to trace this
+      printf("pid: %d, syscall: %s, args: (", p->pid, syscall_stats[num].syscall_name);
+      for (int i = 0; i < 6; i++) {
+        char c = p->arg_types[i];
+        if (c != 'i' && c != 'p' && c != 's')
+          break;
+        if (i)
+          printf(", ");
+        if (c == 'i')
+          printf("%d", p->nargs[i]);
+        else if (c == 'p')
+          printf("%p", p->nargs[i]);
+        else if (c == 's')
+          printf("%s", p->sargs[i]);
+      }
+
+      printf("), return: %d\n", p->trapframe->a0);
+    }
+  }
+  else
+  {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..ea3c59d 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22   // offline 2 : trace
+#define SYS_history 23  // offline 2 : history
+#define SYS_shutdown 24 // offline 2 : exit
diff --git a/kernel/syscall_status.h b/kernel/syscall_status.h
new file mode 100644
index 0000000..fcaab95
--- /dev/null
+++ b/kernel/syscall_status.h
@@ -0,0 +1,8 @@
+// offline 2 : history
+
+struct syscall_status {
+    char syscall_name[16];
+    int count;
+    int accum_time;
+    struct spinlock lock;
+};
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..72b7b98 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "syscall_status.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,35 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// offline 2 : trace
+uint64
+sys_trace(void)
+{
+  int syscall_num;
+  argint(0, &syscall_num);
+  if (syscall_num < 0)
+    return -1;
+  struct proc *p = myproc();  // myproc() returns the current process
+  p->trace_id = syscall_num;
+  return 0;
+}
+
+// offline 2 : history
+uint64
+sys_history(void)
+{
+  int syscall_num;
+  uint64 p;                   // pointer to user syscall_status struct
+  argint(0, &syscall_num);
+  argaddr(1, &p);             // p now contains the address of the user struct
+  return get_syscall(syscall_num, (struct syscall_status*) p);
+}
+
+// offline 2 : exit
+uint64
+sys_shutdown(void)
+{
+  halt();
+  return 0;
+}
\ No newline at end of file
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..69400d8
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,39 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/spinlock.h"
+#include "kernel/syscall_status.h"
+
+int
+main(int argc, char *argv[])
+{
+  int num = 0;
+  const int n_syscall = 24;
+  if (argc >= 2)
+    num = atoi(argv[1]);
+
+  struct syscall_status p;
+  int ret;
+
+  if (num > 0) {
+    ret = history(num, &p);
+    fprintf(2, "%d:\tsyscall: %s, #: %d, time: %d\n", num, p.syscall_name, p.count, p.accum_time);
+  }
+  else {
+    for (int i = 1; i <= n_syscall; i++) {
+      ret = history(i, &p);
+      if (ret < 0)
+        break;
+      fprintf(2, "%d:\tsyscall: %s, #: %d, time: %d\n", i, p.syscall_name, p.count, p.accum_time);
+    }
+  }
+
+  if (ret < 0)
+  {
+    fprintf(2, "history failed\n");
+    exit(1);
+  }
+
+  exit(0);
+}
diff --git a/user/shutdown.c b/user/shutdown.c
new file mode 100644
index 0000000..59f41d7
--- /dev/null
+++ b/user/shutdown.c
@@ -0,0 +1,11 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+    shutdown();
+    return 0;
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..3dd9b4c
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..9c6610c 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct syscall_status;
 
 // system calls
 int fork(void);
@@ -22,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);                             // offline 2 : trace
+int history(int, struct syscall_status*);   // offline 2 : history
+int shutdown();                             // offline 2 : exit
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..db2bd3c 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
+entry("shutdown");
