diff --git a/Makefile b/Makefile
index 39a99d7..c03f06f 100644
--- a/Makefile
+++ b/Makefile
@@ -87,7 +87,7 @@ $U/initcode: $U/initcode.S
 tags: $(OBJS) _init
 	etags *.S *.c
 
-ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o
+ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o $U/thread_spinlock.o $U/thread_mutex.o $U/queue.o $U/thread_condvar.o $U/thread_sem.o
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -T $U/user.ld -o $@ $^
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_prodcon\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..d150e72 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             thread_create(uint64, uint64, uint64);
+int             thread_join(uint64);
+int             thread_exit(uint64);
+int             thread_wait(uint64, int);
+void            thread_wake(uint64, int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,6 +170,7 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
@@ -173,6 +179,9 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+uint64          uvmallocmirror(pagetable_t, pagetable_t, uint64, uint64);
+uint64          uvmdeallocmirror(pagetable_t, uint64, uint64);
+uint64          virtualtophysical(pagetable_t, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/mem.h b/kernel/mem.h
new file mode 100644
index 0000000..7216d7c
--- /dev/null
+++ b/kernel/mem.h
@@ -0,0 +1,5 @@
+struct mem {
+    struct spinlock lock;
+    int ref_count;
+    int is_allocated;
+};
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..e74e65c 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,22 +5,26 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "mem.h"
 
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
+struct mem mem[NPROC]; // will be used for memory synchronization
 
 struct proc *initproc;
 
 int nextpid = 1;
+int nextmemid = 1;
 struct spinlock pid_lock;
+struct spinlock memid_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
 
 extern char trampoline[]; // trampoline.S
 
-// helps ensure that wakeups of wait()ing
+// helps ensure that wakeups of wait()ing and join()ing
 // parents are not lost. helps obey the
 // memory model when using p->parent.
 // must be acquired before any p->lock.
@@ -51,11 +55,18 @@ procinit(void)
   
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
+  initlock(&memid_lock, "nextmemid");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
+  struct mem *m;
+  for (m = mem; m < &mem[NPROC]; m++) {
+    initlock(&m->lock, "mem");
+    m->is_allocated = 0;
+    m->ref_count = 0;
+  }
 }
 
 // Must be called with interrupts disabled,
@@ -102,12 +113,25 @@ allocpid()
   return pid;
 }
 
+int
+allocmemid()
+{
+  int memid;
+
+  acquire(&memid_lock);
+  memid = nextmemid;
+  nextmemid = nextmemid + 1;
+  release(&memid_lock);
+
+  return memid;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
 // If there are no free procs, or a memory allocation fails, return 0.
 static struct proc*
-allocproc(void)
+allocproc(int is_thread)
 {
   struct proc *p;
 
@@ -123,6 +147,18 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
+  p->is_thread = is_thread;
+  if (!is_thread) {
+    p->mem_id = allocmemid();
+    for (int i = 0; i < NPROC; i++) {
+      if (mem[i].is_allocated == 0) {
+        mem[i].is_allocated = 1;
+        mem[i].ref_count = 1;
+        p->mem = &mem[i];
+        break;
+      }
+    }
+  }
   p->state = USED;
 
   // Allocate a trapframe page.
@@ -151,15 +187,28 @@ found:
 
 // free a proc structure and the data hanging from it,
 // including user pages.
-// p->lock must be held.
+// p->lock and p->mem_lock
+// must be held.
 static void
 freeproc(struct proc *p)
 {
   if(p->trapframe)
-    kfree((void*)p->trapframe);
+    kfree((void*)p->trapframe); // free trapframe only, not trampoline
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  if (p->pagetable) {
+    p->mem->ref_count--;
+    // free page table in both of the following cases
+    if (p->mem->ref_count == 0) {
+      p->mem->is_allocated = 0;
+      proc_freepagetable(p->pagetable, p->sz);
+      uvmfree(p->pagetable, p->sz);
+    }
+    else {
+      proc_freepagetable(p->pagetable, 0); // do not delete physical pages
+    }
+  }
+  p->is_thread = 0;
+  p->mem = 0;
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -205,14 +254,13 @@ proc_pagetable(struct proc *p)
   return pagetable;
 }
 
-// Free a process's page table, and free the
-// physical memory it refers to.
+// Free a process's page table.
 void
 proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
-  uvmfree(pagetable, sz);
+  // uvmfree(pagetable, sz); do it in freeproc()
 }
 
 // a user program that calls exec("/init")
@@ -234,7 +282,7 @@ userinit(void)
 {
   struct proc *p;
 
-  p = allocproc();
+  p = allocproc(0);
   initproc = p;
   
   // allocate one user page and copy initcode's instructions
@@ -259,19 +307,71 @@ userinit(void)
 int
 growproc(int n)
 {
-  uint64 sz;
+  uint64 oldsz, newsz;
+
   struct proc *p = myproc();
+  acquire(&p->mem->lock);
 
-  sz = p->sz;
+  oldsz = p->sz;
+  newsz = oldsz + n;
   if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+    // allocate for self
+    p->sz = uvmalloc(p->pagetable, oldsz, oldsz + n, PTE_W);
+    if(p->sz == 0) {
+      // do not set the updated newsz to p->sz
+      p->sz = oldsz;
+      release(&p->mem->lock);
       return -1;
     }
+
+    // mirror this update for others with same mem_id
+    for (struct proc* pp = proc; pp < &proc[NPROC]; pp++) {
+      if (pp == p) continue;
+      acquire(&pp->lock);
+      if (p->mem_id == pp->mem_id && pp->state != ZOMBIE) {
+        if (uvmallocmirror(p->pagetable, pp->pagetable, oldsz, newsz) < 0) {
+          pp->sz = oldsz;
+          release(&pp->lock);
+          goto bad;
+        }
+        pp->sz = p->sz;
+      }
+      release(&pp->lock);
+    }
   } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
+    // deallocate for self
+    p->sz = uvmdealloc(p->pagetable, oldsz, newsz);
+
+    // mirror for others
+    for (struct proc* pp = proc; pp < &proc[NPROC]; pp++) {
+      if (pp == p) continue;
+      acquire(&pp->lock);
+      if (p->mem_id == pp->mem_id && pp->state != ZOMBIE) {
+        pp->sz = uvmdeallocmirror(pp->pagetable, oldsz + n, oldsz);
+      }
+      release(&pp->lock);
+    }
   }
-  p->sz = sz;
+  release(&p->mem->lock);
   return 0;
+
+  bad:
+    // deallocate for self
+    uvmdealloc(p->pagetable, p->sz, oldsz);
+    // mirror for others
+    for (struct proc* pp = proc; pp < &proc[NPROC]; pp++) {
+      if (pp == p) continue;
+      acquire(&pp->lock);
+      if (p->mem_id == pp->mem_id && pp->state != ZOMBIE) {
+        if (pp->sz != oldsz) {
+          uvmdeallocmirror(pp->pagetable, pp->sz, oldsz);
+          p->sz = oldsz;
+        }
+      }
+      release(&pp->lock);
+    }
+    release(&p->mem->lock);
+    return -1;
 }
 
 // Create a new process, copying the parent.
@@ -284,13 +384,15 @@ fork(void)
   struct proc *p = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if((np = allocproc(0)) == 0){
     return -1;
   }
 
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+    acquire(&np->mem->lock);
     freeproc(np);
+    release(&np->mem->lock);
     release(&np->lock);
     return -1;
   }
@@ -351,6 +453,28 @@ exit(int status)
   if(p == initproc)
     panic("init exiting");
 
+  struct proc* pp;
+  for (pp = proc; pp < &proc[NPROC]; pp++) {
+    acquire(&pp->lock);
+    if (p == pp || pp->state == UNUSED) {
+      release(&pp->lock);
+      continue;
+    }
+    if (p->mem_id == pp->mem_id && pp->parent == p && pp->is_thread) {
+      if (pp->state != ZOMBIE) {
+        release(&pp->lock);
+        kill(pp->pid);
+      }
+      else {
+        release(&pp->lock);
+      }
+      thread_join(pp->pid);
+    }
+    else {
+      release(&pp->lock);
+    }
+  }
+
   // Close all open files.
   for(int fd = 0; fd < NOFILE; fd++){
     if(p->ofile[fd]){
@@ -408,18 +532,25 @@ wait(uint64 addr)
         if(pp->state == ZOMBIE){
           // Found one.
           pid = pp->pid;
+          acquire(&p->mem->lock);
           if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
                                   sizeof(pp->xstate)) < 0) {
+            release(&p->mem->lock);
             release(&pp->lock);
             release(&wait_lock);
             return -1;
           }
-          freeproc(pp);
+          else {
+            freeproc(pp);
+            release(&p->mem->lock);
+            release(&pp->lock);
+            release(&wait_lock);
+            return pid;
+          }
+        }
+        else {
           release(&pp->lock);
-          release(&wait_lock);
-          return pid;
         }
-        release(&pp->lock);
       }
     }
 
@@ -434,6 +565,90 @@ wait(uint64 addr)
   }
 }
 
+int
+thread_wait(uint64 va, int value)
+{
+  struct proc* p = myproc();
+  acquire(&p->mem->lock);
+
+  int *addr = (int *) virtualtophysical(p->pagetable, va);
+
+  // __sync_bool_compare_and_swap (T* __p, U __compVal, V __exchVal, ...)
+  // compares the value of __compVal with the value of the variable that __p
+  // points to. If they are equal, the value of __exchVal is stored in the
+  // address that is specified by __p; otherwise, no operation is performed.
+  // returns true if comparison finds equality, otherwise false
+  if (__sync_bool_compare_and_swap(addr, value, value)) {
+    sleep(addr, &p->mem->lock);
+    release(&p->mem->lock);
+    return 0;
+  }
+
+  release(&p->mem->lock);
+  return -1;
+}
+
+void
+thread_wake(uint64 va, int n)
+{
+  struct proc* p = myproc();
+  acquire(&p->mem->lock);
+
+  int *addr = (int *) virtualtophysical(p->pagetable, va);
+
+  for (struct proc* pp = proc; pp < &proc[NPROC]; pp++) {
+    acquire(&pp->lock);
+    if (p->mem_id == pp->mem_id && pp->chan == addr && pp->state == SLEEPING) {
+      pp->state = RUNNABLE;
+      n--;
+    }
+    release(&pp->lock);
+    if (n == 0) break;
+  }
+
+  release(&p->mem->lock);
+}
+
+int
+thread_join(uint64 tid) {
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for process with tid.
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      acquire(&pp->lock);
+      acquire(&p->mem->lock);
+      if(pp->parent == p && pp->mem_id == p->mem_id && pp->pid == tid){
+        // make sure the child isn't still in exit() or swtch().
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          freeproc(pp);
+          release(&pp->lock);
+          release(&p->mem->lock);
+          release(&wait_lock);
+          return pid;
+        }
+      }
+
+      release(&pp->lock);
+      release(&p->mem->lock);
+    }
+
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -681,3 +896,77 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+thread_create(uint64 fcn, uint64 arg, uint64 stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+  uint64 ra = 0xffffffff;
+  uint64 sp = stack + PGSIZE;
+
+  // Allocate process.
+  if((np = allocproc(1)) == 0){
+    return -1;
+  }
+
+  acquire(&p->mem->lock);
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0) {
+    goto bad;
+  }
+
+  np->mem_id = p->mem_id;
+  np->mem = p->mem;
+  np->mem->ref_count++;
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  sp -= sizeof(uint64);
+  sp -= sp % 16; // align to 16-byte boundary
+
+  if (copyout(np->pagetable, sp, (char *)(&ra), sizeof(uint64)) < 0) {
+    goto bad;
+  }
+
+  np->trapframe->ra = ra;
+  np->trapframe->epc = fcn;
+  np->trapframe->a0 = arg;
+  np->trapframe->sp = sp;
+
+  release(&np->mem->lock);
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  if (p->is_thread) np->parent = p->parent;
+  else np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+
+  bad:
+    freeproc(np);
+    release(&np->mem->lock);
+    release(&np->lock);
+    return -1;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..c289027 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int is_thread;               // if it is thread
+  int mem_id;                  // All threads will have the same physical pages with the mother, hence the same memory ID
+  struct mem *mem;             // pointer to the memory struct
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ffffba5 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,31 +101,43 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_yield(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_thread_wait(void);
+extern uint64 sys_thread_wake(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+[SYS_fork]          sys_fork,
+[SYS_exit]          sys_exit,
+[SYS_wait]          sys_wait,
+[SYS_pipe]          sys_pipe,
+[SYS_read]          sys_read,
+[SYS_kill]          sys_kill,
+[SYS_exec]          sys_exec,
+[SYS_fstat]         sys_fstat,
+[SYS_chdir]         sys_chdir,
+[SYS_dup]           sys_dup,
+[SYS_getpid]        sys_getpid,
+[SYS_sbrk]          sys_sbrk,
+[SYS_sleep]         sys_sleep,
+[SYS_uptime]        sys_uptime,
+[SYS_open]          sys_open,
+[SYS_write]         sys_write,
+[SYS_mknod]         sys_mknod,
+[SYS_unlink]        sys_unlink,
+[SYS_link]          sys_link,
+[SYS_mkdir]         sys_mkdir,
+[SYS_close]         sys_close,
+[SYS_yield]         sys_yield,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join]   sys_thread_join,
+[SYS_thread_exit]   sys_thread_exit,
+[SYS_thread_wait]   sys_thread_wait,
+[SYS_thread_wake]   sys_thread_wake,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7089b3b 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,28 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork            1
+#define SYS_exit            2
+#define SYS_wait            3
+#define SYS_pipe            4
+#define SYS_read            5
+#define SYS_kill            6
+#define SYS_exec            7
+#define SYS_fstat           8
+#define SYS_chdir           9
+#define SYS_dup             10
+#define SYS_getpid          11
+#define SYS_sbrk            12
+#define SYS_sleep           13
+#define SYS_uptime          14
+#define SYS_open            15
+#define SYS_write           16
+#define SYS_mknod           17
+#define SYS_unlink          18
+#define SYS_link            19
+#define SYS_mkdir           20
+#define SYS_close           21
+#define SYS_yield           22
+#define SYS_thread_create   23
+#define SYS_thread_join     24
+#define SYS_thread_exit     25
+#define SYS_thread_wait     26
+#define SYS_thread_wake     27
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..433c508 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,56 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_yield(void)
+{
+  yield();
+  return 0;
+}
+
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn, arg, stack;
+  argaddr(0, &fcn);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+  return thread_create(fcn, arg, stack);
+}
+
+uint64
+sys_thread_join(void)
+{
+  int tid;
+  argint(0, &tid);
+  return thread_join(tid);
+}
+
+uint64
+sys_thread_exit(void)
+{
+  exit(0);
+  return 0;
+}
+
+uint64
+sys_thread_wait(void)
+{
+  uint64 addr;
+  int value;
+  argaddr(0, &addr);
+  argint(1, &value);
+  return thread_wait(addr, value);
+}
+
+uint64
+sys_thread_wake(void)
+{
+  uint64 addr;
+  int n;
+  argaddr(0, &addr);
+  argint(1, &n);
+  thread_wake(addr, n);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..503c4ca 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -248,6 +248,39 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
   return newsz;
 }
 
+// Given a parent process's page table, copy
+// its changes from oldsz to newsz into a
+// child's page table. Do not allocate any
+// new physical memory. Just add the mappings.
+// returns 0 on success, -1 on failure.
+// frees any allocated pages on failure.
+uint64
+uvmallocmirror(pagetable_t old, pagetable_t new, uint64 oldsz, uint64 newsz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  // PGROUNDUP rounds a value up to a multiple of PGSIZE
+  oldsz = PGROUNDUP(oldsz);
+  for(i = oldsz; i < newsz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
@@ -266,6 +299,25 @@ uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
   return newsz;
 }
 
+// Deallocate user pages to bring the process size from oldsz to
+// newsz, without freeing the physical memory.
+// oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+uint64
+uvmdeallocmirror(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+{
+   if(newsz >= oldsz)
+    return oldsz;
+
+  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 0); // do not free the physical memory
+  }
+
+  return newsz;
+}
+
 // Recursively free page-table pages.
 // All leaf mappings must already have been removed.
 void
@@ -319,7 +371,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto err;
-    memmove(mem, (char*)pa, PGSIZE);
+    memmove(mem, (char*)pa, PGSIZE); // copies PGSIZE amount from pa to mem
     if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
       kfree(mem);
       goto err;
@@ -332,6 +384,42 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+// Given a parent process's page table, copy
+// its memory into a child's page table.
+// Do not create any new physical memory.
+// returns 0 on success, -1 on failure.
+// frees any allocated pages on failure.
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    // walk(pagetable, va, alloc) returns the address of the PTE
+    // in page table pagetable for virtual address va.
+    // if alloc != 0, walk() creates any required page-table pages.
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte); // Page Table Entry to Physical Address Translation
+    flags = PTE_FLAGS(*pte);
+    // mappages(pagetable, va, size, pa, perm) creates PTEs for virtual
+    // addresses starting at va referring to physical addresses starting
+    // at pa in pagetable.
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
@@ -437,3 +525,11 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+// virtual address to physical address translation
+uint64
+virtualtophysical(pagetable_t pagetable, uint64 va)
+{
+  uint64 page = walkaddr(pagetable, va);
+  return page + (va - PGROUNDDOWN(va));
+}
diff --git a/user/prodcon.c b/user/prodcon.c
new file mode 100644
index 0000000..c4cc434
--- /dev/null
+++ b/user/prodcon.c
@@ -0,0 +1,134 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/queue.h"
+#include "user/thread_mutex.h"
+#include "user/thread_condvar.h"
+#include "user/thread_sem.h"
+
+struct queue
+{
+    int arr[16];
+    int front;
+    int rear;
+    int size;
+};
+
+void queue_init(struct queue *q)
+{
+    q->front = 0;
+    q->rear = 0;
+    q->size = 0;
+}
+
+void push(struct queue *q, int x)
+{
+    q->arr[q->rear] = x;
+    q->rear = (q->rear + 1) % 16;
+    q->size++;
+}
+
+int front(struct queue *q)
+{
+    if (q->size == 0)
+        return -1;
+    return q->arr[q->front];
+}
+
+void pop(struct queue *q)
+{
+    q->front = (q->front + 1) % 16;
+    q->size--;
+}
+
+struct queue q;
+// a mutex object lock
+struct thread_mutex lock;
+// a semaphore object empty
+struct thread_sem empty;
+// a semaphore object full
+struct thread_sem full;
+
+void init_semaphore()
+{
+    // initialize mutex lock
+    thread_mutex_init(&lock);
+    // initialize semaphore empty with 5
+    thread_sem_init(&empty, 5);
+    // initialize semaphore full with 0
+    thread_sem_init(&full, 0);
+}
+
+void ProducerFunc(void *arg)
+{
+    printf("%s\n", (char *)arg);
+    int i;
+    for (i = 1; i <= 10; i++)
+    {
+        // wait for semphore empty
+        thread_sem_wait(&empty);
+        // wait for mutex lock
+        thread_mutex_lock(&lock);
+
+        sleep(1);
+        push(&q, i);
+        printf("producer produced item %d\n", i);
+
+        // unlock mutex lock
+        thread_mutex_unlock(&lock);
+        // post semaphore full
+        thread_sem_post(&full);
+    }
+    thread_exit();
+}
+
+void ConsumerFunc(void *arg)
+{
+    printf("%s\n", (char *)arg);
+    int i;
+    for (i = 1; i <= 10; i++)
+    {
+        // wait for semphore full
+        thread_sem_wait(&full);
+        // wait for mutex lock
+        thread_mutex_lock(&lock);
+
+        sleep(1);
+        int item = front(&q);
+        pop(&q);
+        printf("consumer consumed item %d\n", item);
+
+        // unlock mutex lock
+        thread_mutex_unlock(&lock);
+        // post semaphore empty
+        thread_sem_post(&empty);
+    }
+
+    thread_exit();
+}
+
+int main(void)
+{
+
+    init_semaphore();
+
+    char *message1 = "i am producer";
+    char *message2 = "i am consumer";
+
+    void *s1, *s2;
+    int thread1, thread2;
+    int r1 = 2, r2 = 3;
+
+    s1 = malloc(4096);
+    s2 = malloc(4096);
+
+    thread1 = thread_create(ProducerFunc, (void *)message1, s1);
+    thread2 = thread_create(ConsumerFunc, (void *)message2, s2);
+
+    r1 = thread_join(thread1);
+    r2 = thread_join(thread2);
+
+    printf("%d %d %d %d\n", r1, r2, thread1, thread2);
+
+    exit(0);
+}
diff --git a/user/queue.c b/user/queue.c
new file mode 100644
index 0000000..f54d695
--- /dev/null
+++ b/user/queue.c
@@ -0,0 +1,30 @@
+#include "user/queue.h"
+
+void
+my_queue_init(struct my_queue *q)
+{
+    q->front = 0;
+    q->rear = 0;
+    q->size = 0;
+}
+
+int*
+my_push(struct my_queue *q, int x)
+{
+    q->arr[q->rear] = x;
+    int* ret = &(q->arr[q->rear]);
+    q->rear = (q->rear + 1) % 100;
+    q->size++;
+    return ret;
+}
+
+int*
+my_pop(struct my_queue *q)
+{
+    if (q->size == 0)
+        return 0;
+    int* ret = &(q->arr[q->front]);
+    q->front = (q->front + 1) % 100;
+    q->size--;
+    return ret;
+}
\ No newline at end of file
diff --git a/user/queue.h b/user/queue.h
new file mode 100644
index 0000000..3f8fc5b
--- /dev/null
+++ b/user/queue.h
@@ -0,0 +1,9 @@
+struct my_queue
+{
+    int arr[100];
+    int front, rear, size;
+};
+
+void my_queue_init(struct my_queue *q);
+int* my_push(struct my_queue *q, int x);
+int* my_pop(struct my_queue *q);
\ No newline at end of file
diff --git a/user/thread_condvar.c b/user/thread_condvar.c
new file mode 100644
index 0000000..47ccf52
--- /dev/null
+++ b/user/thread_condvar.c
@@ -0,0 +1,42 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "user/thread_mutex.h"
+#include "user/queue.h"
+#include "user/thread_condvar.h"
+
+void
+thread_cond_init(struct thread_condvar *cv)
+{
+    my_queue_init(&cv->wait_queue);
+}
+
+void
+thread_cond_wait(struct thread_condvar *cv, struct thread_mutex* m)
+{
+    int* ptr = my_push(&cv->wait_queue, 0); // add to wait queue
+	// ptr reset so can now unlock mutex,
+    // any calls to signal() after this point
+    // will wake it up
+	thread_mutex_unlock(m);
+
+	while(__sync_bool_compare_and_swap(ptr, 0, 0)) {
+        // check *ptr for 0, if 0 then wait for signal
+		thread_wait(ptr, 0);
+	}
+
+    // *ptr is now 1
+	thread_mutex_lock(m);
+}
+
+void
+thread_cond_signal(struct thread_condvar *cv)
+{
+    __sync_synchronize();
+
+    int *ptr = my_pop(&cv->wait_queue); // remove from wait queue
+    if (ptr == 0)
+        return;
+    __sync_bool_compare_and_swap(ptr, 0, 1);
+
+    thread_wake(ptr, 1); // wake up 1 thread only
+}
\ No newline at end of file
diff --git a/user/thread_condvar.h b/user/thread_condvar.h
new file mode 100644
index 0000000..1878145
--- /dev/null
+++ b/user/thread_condvar.h
@@ -0,0 +1,7 @@
+struct thread_condvar {
+    struct my_queue wait_queue;
+};
+
+void thread_cond_init(struct thread_condvar *);
+void thread_cond_wait(struct thread_condvar *, struct thread_mutex *);
+void thread_cond_signal(struct thread_condvar *);
\ No newline at end of file
diff --git a/user/thread_mutex.c b/user/thread_mutex.c
new file mode 100644
index 0000000..d2cfbc6
--- /dev/null
+++ b/user/thread_mutex.c
@@ -0,0 +1,51 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "user/thread_mutex.h"
+
+void
+thread_mutex_init(struct thread_mutex *lk)
+{
+  lk->locked = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_mutex_lock(struct thread_mutex *lk)
+{
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0) {
+    yield();
+  }
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+}
+
+// Release the lock.
+void
+thread_mutex_unlock(struct thread_mutex *lk)
+{
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+}
\ No newline at end of file
diff --git a/user/thread_mutex.h b/user/thread_mutex.h
new file mode 100644
index 0000000..0e5fb94
--- /dev/null
+++ b/user/thread_mutex.h
@@ -0,0 +1,8 @@
+// Mutual exclusion lock.
+struct thread_mutex {
+  volatile uint locked;       // Is the lock held?
+};
+
+void thread_mutex_init(struct thread_mutex*);
+void thread_mutex_lock(struct thread_mutex*);
+void thread_mutex_unlock(struct thread_mutex*);
\ No newline at end of file
diff --git a/user/thread_sem.c b/user/thread_sem.c
new file mode 100644
index 0000000..314bbbc
--- /dev/null
+++ b/user/thread_sem.c
@@ -0,0 +1,37 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "user/thread_mutex.h"
+#include "user/queue.h"
+#include "user/thread_condvar.h"
+#include "user/thread_sem.h"
+
+void
+thread_sem_init(struct thread_sem *sem, unsigned int value)
+{
+    sem->count = value;
+    thread_mutex_init(&sem->m);
+    thread_cond_init(&sem->cv);
+}
+
+void
+thread_sem_wait(struct thread_sem *sem)
+{
+    thread_mutex_lock(&sem->m);
+    while (__sync_bool_compare_and_swap(&sem->count, 0, 0))
+        thread_cond_wait(&sem->cv, &sem->m);
+    // T __sync_fetch_and_sub (T* __p, U __v, ...)
+    // atomically subtracts the value of __v from the
+    // variable that __p points to. The result is stored
+    // in the address that is specified by __p.
+    __sync_fetch_and_sub(&sem->count, 1);
+    thread_mutex_unlock(&sem->m);
+}
+
+void
+thread_sem_post(struct thread_sem *sem)
+{
+    thread_mutex_lock(&sem->m);
+    __sync_fetch_and_add(&sem->count, 1);
+    thread_cond_signal(&sem->cv);
+    thread_mutex_unlock(&sem->m);
+}
\ No newline at end of file
diff --git a/user/thread_sem.h b/user/thread_sem.h
new file mode 100644
index 0000000..00ab027
--- /dev/null
+++ b/user/thread_sem.h
@@ -0,0 +1,9 @@
+struct thread_sem {
+    volatile int count;
+    struct thread_mutex m;
+    struct thread_condvar cv;
+};
+
+void thread_sem_init(struct thread_sem *sem, unsigned int);
+void thread_sem_wait(struct thread_sem *sem);
+void thread_sem_post(struct thread_sem *sem);
\ No newline at end of file
diff --git a/user/thread_spinlock.c b/user/thread_spinlock.c
new file mode 100644
index 0000000..24e54d0
--- /dev/null
+++ b/user/thread_spinlock.c
@@ -0,0 +1,50 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "user/thread_spinlock.h"
+
+void
+thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+}
\ No newline at end of file
diff --git a/user/thread_spinlock.h b/user/thread_spinlock.h
new file mode 100644
index 0000000..ef4c75f
--- /dev/null
+++ b/user/thread_spinlock.h
@@ -0,0 +1,8 @@
+// Mutual exclusion lock.
+struct thread_spinlock {
+  volatile uint locked;       // Is the lock held?
+};
+
+void thread_spin_init(struct thread_spinlock*);
+void thread_spin_lock(struct thread_spinlock*);
+void thread_spin_unlock(struct thread_spinlock*);
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..89f2143
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,81 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/thread_spinlock.h"
+#include "user/thread_mutex.h"
+
+struct balance
+{
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+
+volatile unsigned int delay(unsigned int d)
+{
+    unsigned int i;
+    for (i = 0; i < d; i++)
+    {
+        __asm volatile("nop" ::
+                           :);
+    }
+
+    return i;
+}
+
+void do_work(void *arg)
+{
+    int i;
+    int old;
+
+    struct balance *b = (struct balance *)arg;
+    printf("Starting do_work: s:%s\n", b->name);
+
+    for (i = 0; i < b->amount; i++)
+    {
+        // lock and mlock will be implemented by you.
+        thread_spin_lock(&lock);
+        thread_mutex_lock(&mlock);
+        old = total_balance;
+        delay(100000);
+        if (old != total_balance)
+            printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+        total_balance = old + 1;
+        thread_spin_unlock(&lock);
+        thread_mutex_unlock(&mlock);
+    }
+
+    printf("Done s:%x\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[])
+{
+    thread_spin_init(&lock);
+    thread_mutex_init(&mlock);
+    struct balance b1 = {"b1", 3200};
+    struct balance b2 = {"b2", 2800};
+
+    void *s1, *s2;
+    int thread1, thread2;
+    int r1 = 2, r2 = 3;
+
+    s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+    s2 = malloc(4096);
+
+    thread1 = thread_create(do_work, (void *)&b1, s1);
+    thread2 = thread_create(do_work, (void *)&b2, s2);
+
+    r1 = thread_join(thread1);
+    r2 = thread_join(thread2);
+
+    printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+           thread1, r1, thread2, r2, total_balance);
+
+    return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..9614557 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,12 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int yield(void);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int);
+int thread_exit(void);
+int thread_wait(int*, int);
+int thread_wake(int*, int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..f331340 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,9 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("yield");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("thread_wait");
+entry("thread_wake");
\ No newline at end of file
